// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId     Int     @id @default(autoincrement())
  name       String
  email      String  @unique
  password   String
  profileUrl String @default("https://img.freepik.com/premium-vector/knight-minimalist-line-art-icon-logo-symbol_925376-269058.jpg?w=1060")
  isAdmin    Boolean @default(false)
  userTitle  String?
  bio        String?

  recipes   Recipe[]
  bookmarks Bookmark[]
  comments  Comment[]
  likes     Like[]
  recipeReports RecipeReport[] // Recipes reported by this user
  commentReports CommentReport[] // Comments reported by this user

  followers UserFollower[] @relation("Followers") // Users who follow this user
  following UserFollower[] @relation("Following") // Users this user is following

  activities    Activity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserFollower {
  followId Int @id @default(autoincrement())

  followFromUserId Int // User who initiates the follow
  followFromUser   User @relation("Following", fields: [followFromUserId], references: [userId], onDelete: Cascade)

  followToUserId Int // User being followed
  followToUser   User @relation("Followers", fields: [followToUserId], references: [userId], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([followFromUserId, followToUserId]) // Ensure no duplicate relationships
}

model Recipe {
  recipeId    Int     @id @default(autoincrement())
  title       String
  description String?
  servingSize Int?
  recipeUrl   String @default("https://i.ytimg.com/vi/CPbKkb1hn7I/hq720.jpg?sqp=-oaymwEhCK4FEIIDSFryq4qpAxMIARUAAAAAGAElAADIQj0AgKJD&rs=AOn4CLBCWAzNKtwroNf1JzxKUvJEM5H4Wg")
  steps       Json @default("[]")

  userId Int
  user   User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  ingredients Ingredient[]
  categories  Category[]
  bookmarks   Bookmark[]
  comments    Comment[]
  likes       Like[]
  recipeReports RecipeReport[] // Reports for this recipe
  activities   Activity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingredient {
  ingredientId   Int    @id @default(autoincrement())
  ingredientName String
  quantityAmount String? // e.g., "1", "1/4"
  quantityUnit   String? // e.g., "cup", "tbsp"

  recipeId Int
  recipe   Recipe @relation(fields: [recipeId], references: [recipeId], onDelete: Cascade)
}

model Category {
  id           Int      @id @default(autoincrement())
  categoryName String   @unique
  recipes      Recipe[] //Many to many Relation to Recipe model //will allow search by category name
}

model Bookmark {
  bookmarkId Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())

  userId   Int
  user     User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  recipeId Int
  recipe   Recipe @relation(fields: [recipeId], references: [recipeId], onDelete: Cascade)

  @@unique([userId, recipeId]) // Enforce unique bookmarks for each user-recipe pair
}

model Comment {
  id   Int    @id @default(autoincrement())
  text String

  recipeId Int
  recipe   Recipe @relation(fields: [recipeId], references: [recipeId], onDelete: Cascade)
  userId   Int
  user     User   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  commentReports CommentReport[] // Reports for this comment
  activities   Activity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id Int @id @default(autoincrement())

  userId   Int
  user     User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  recipeId Int
  recipe   Recipe @relation(fields: [recipeId], references: [recipeId], onDelete: Cascade)

  createdAt DateTime @default(now())
  activities   Activity[]

  @@unique([userId, recipeId])// Enforce unique likes for each user-recipe pair
}


model RecipeReport {
  reportId    Int      @id @default(autoincrement())
  reason      String?
  
  reporterId  Int
  reporter    User     @relation(fields: [reporterId], references: [userId])
  recipeId    Int
  recipe      Recipe   @relation(fields: [recipeId], references: [recipeId], onDelete: Cascade)

  createdAt   DateTime @default(now())
 
  @@unique([reporterId, recipeId]) // Ensure a user can report a recipe only once
}
model CommentReport {
  reportId    Int      @id @default(autoincrement())
  reason      String?
  
  reporterId  Int
  reporter    User     @relation(fields: [reporterId], references: [userId])
  commentId   Int
  comment     Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())

  @@unique([reporterId, commentId]) // Ensure a user can report a comment only once
}

model Activity {
  id        Int      @id @default(autoincrement())
  type      String   // 'new_recipe', 'comment', 'like'
  userId    Int
  user      User     @relation(fields: [userId], references: [userId])
  recipeId  Int?
  recipe    Recipe?  @relation(fields: [recipeId], references: [recipeId])
  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: SetNull)
  likeId    Int?
  like      Like?    @relation(fields: [likeId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
}